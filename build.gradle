plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
}

version = "${mod_v}-${mc_v}"
group = "einstein.${modid}"
archivesBaseName = "${modid}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'official', version: "${mc_v}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', archivesBaseName

            mods {
                jmc {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', archivesBaseName

            mods {
                jmc {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', archivesBaseName

            mods {
                jmc {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', archivesBaseName, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                jmc {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets {
    main {
        resources {
            srcDir 'src/generated/resources'
            exclude '.cache'
        }
    }
}

repositories {
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_v}-${forge_v}"

//    implementation fg.deobf("curse.maven:einsteins-library-405744:3545865")
    implementation fg.deobf("curse.maven:jei-238222:3876379")
    implementation fg.deobf("curse.maven:catalogue-459701:3873264")
    implementation fg.deobf("curse.maven:configured-457570:3872190")
//    implementation fg.deobf("curse.maven:cake-chomps-307943:3555957")
}

jar {
    manifest {
        attributes([
                "Specification-Title" : "JustMoreCakes",
                "Specification-Vendor" : "MincraftEinstein",
                "Specification-Version" : "1",
                "Implementation-Title" : "JustMoreCakes",
                "Implementation-Version" : "${mod_v}",
                "Implementation-Vendor" : "MinecraftEinstein",
                "Implementation-Timestamp" : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    excludes.add('einstein/cutandcolored/data')
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
